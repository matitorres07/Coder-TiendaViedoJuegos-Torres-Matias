{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mati\\\\Desktop\\\\REACT\\\\tiendavideojuegos-torres\\\\src\\\\components\\\\ItemList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Item from './Item';\nimport { productList } from '../data/data.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ItemList = () => {\n  _s();\n\n  //usaré useState para luego en products introducir los productos que consuma de mi API o en este caso del array de productos que tengo en la carpeta data\n  const [products, setProducts] = useState([]); //esta constante guarda una instancia de la clase Promise, en la cual hay un setTimeout con 2 segundos que devuelve mi array de productos como parámetro en el \"resolve\".\n\n  const getProducts = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(productList);\n    }, 2000);\n  }); //esta función implemente un async que setea la variable products de mi useState y le ingresa mi array de productos\n\n  const getProductsFromDB = async () => {\n    try {\n      const result = await getProducts;\n      setProducts(result);\n    } catch (error) {\n      console.log(error);\n      alert('No podemos mostrar los productos en este momento');\n    }\n  }; //useEffect ejecutará la función getProductsFromDB simulando que estamos consumiendo los datos desde una base de datos.\n  //Esto se ejecutará solo una vez ya que el array de dependencias \"[]\" está vacío.\n\n\n  useEffect(() => {\n    getProductsFromDB();\n  }, []); //[] = array de dependencias\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"product-list-container\",\n    children: //estaré implementando un ternario (ver documentación de mozilla) en el cual pregunto por el número de elementos que hay en products\n    products.length ?\n    /*#__PURE__*/\n    //si en products no hay nada, el valor será \"0\" y en ese caso, un cero se puede interpretar como un valor booleano por lo cual se considerará como falso\n    _jsxDEV(_Fragment, {\n      children: //Luego de dos segundos, products tendrá los productos dentro, y por lo tanto el products.length será distinto de \"0\", así que se puede interpretar como un valor booleano \"true\"\n      products.map(product => {\n        // acá tenemos el uso de map, que basicamente está retornando un div con nuestro item adentro tantas veces como productos tenga en mi array de productos (nótese la propiedad key a la cual asigno el id para que react pueda identificar los nodos que se van creando y así los pueda diferenciar). Por favor leer la documentación de map en MDN\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Item, {\n            name: product.name,\n            thumbnail: product.thumbnail,\n            price: product.price,\n            stock: product.stock,\n            id: product.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }, this)\n        }, product.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cargando productos...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this) //Si products.length es \"0\" se interpreta como falso y por lo tanto se imprimirá \"cargando productos\"\n    //Recuerden, en javascript tenemos tres datos que se pueden interpretar como false: 0, false y undefined\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItemList, \"f86L6rLANGURv6GE6gupp7+oOp4=\");\n\n_c = ItemList;\nexport default ItemList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemList\");","map":{"version":3,"sources":["C:/Users/Mati/Desktop/REACT/tiendavideojuegos-torres/src/components/ItemList.js"],"names":["React","useEffect","useState","Item","productList","ItemList","products","setProducts","getProducts","Promise","resolve","reject","setTimeout","getProductsFromDB","result","error","console","log","alert","length","map","product","name","thumbnail","price","stock","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,WAAT,QAA4B,iBAA5B;;;;AAGA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC,CAFqB,CAIrB;;AACA,QAAMM,WAAW,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnDC,IAAAA,UAAU,CAAC,MAAM;AACfF,MAAAA,OAAO,CAACN,WAAD,CAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJmB,CAApB,CALqB,CAWrB;;AACA,QAAMS,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMN,WAArB;AACAD,MAAAA,WAAW,CAACO,MAAD,CAAX;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,MAAAA,KAAK,CAAC,kDAAD,CAAL;AACD;AACF,GARD,CAZqB,CAsBrB;AACA;;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT,CAxBqB,CA0Bb;;AAER,sBACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA,cAEI;AACAP,IAAAA,QAAQ,CAACa,MAAT;AAAA;AAAoB;AAClB;AAAA,gBAEI;AACAb,MAAAA,QAAQ,CAACc,GAAT,CAAcC,OAAD,IAAa;AACxB;AACA,4BACE;AAAA,iCACE,QAAC,IAAD;AACE,YAAA,IAAI,EAAEA,OAAO,CAACC,IADhB;AAEE,YAAA,SAAS,EAAED,OAAO,CAACE,SAFrB;AAGE,YAAA,KAAK,EAAEF,OAAO,CAACG,KAHjB;AAIE,YAAA,KAAK,EAAEH,OAAO,CAACI,KAJjB;AAKE,YAAA,EAAE,EAAEJ,OAAO,CAACK;AALd;AAAA;AAAA;AAAA;AAAA;AADF,WAAUL,OAAO,CAACK,EAAlB;AAAA;AAAA;AAAA;AAAA,gBADF;AAWD,OAbD;AAHJ,qBADF,gBAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBN,CAyBM;AACF;;AA1BJ;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CA3DD;;GAAMrB,Q;;KAAAA,Q;AA6DN,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Item from './Item';\r\nimport { productList } from '../data/data.js';\r\n\r\n\r\nconst ItemList = () => {\r\n  //usaré useState para luego en products introducir los productos que consuma de mi API o en este caso del array de productos que tengo en la carpeta data\r\n  const [products, setProducts] = useState([]);\r\n\r\n  //esta constante guarda una instancia de la clase Promise, en la cual hay un setTimeout con 2 segundos que devuelve mi array de productos como parámetro en el \"resolve\".\r\n  const getProducts = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(productList);\r\n    }, 2000);\r\n  });\r\n\r\n  //esta función implemente un async que setea la variable products de mi useState y le ingresa mi array de productos\r\n  const getProductsFromDB = async () => {\r\n    try {\r\n      const result = await getProducts;\r\n      setProducts(result);\r\n    } catch (error) {\r\n      console.log(error);\r\n      alert('No podemos mostrar los productos en este momento');\r\n    }\r\n  };\r\n\r\n  //useEffect ejecutará la función getProductsFromDB simulando que estamos consumiendo los datos desde una base de datos.\r\n  //Esto se ejecutará solo una vez ya que el array de dependencias \"[]\" está vacío.\r\n  useEffect(() => {\r\n    getProductsFromDB();\r\n  }, []); //[] = array de dependencias\r\n\r\n  return (\r\n    <div className=\"product-list-container\">\r\n      {\r\n        //estaré implementando un ternario (ver documentación de mozilla) en el cual pregunto por el número de elementos que hay en products\r\n        products.length ? ( //si en products no hay nada, el valor será \"0\" y en ese caso, un cero se puede interpretar como un valor booleano por lo cual se considerará como falso\r\n          <>\r\n            {\r\n              //Luego de dos segundos, products tendrá los productos dentro, y por lo tanto el products.length será distinto de \"0\", así que se puede interpretar como un valor booleano \"true\"\r\n              products.map((product) => {\r\n                // acá tenemos el uso de map, que basicamente está retornando un div con nuestro item adentro tantas veces como productos tenga en mi array de productos (nótese la propiedad key a la cual asigno el id para que react pueda identificar los nodos que se van creando y así los pueda diferenciar). Por favor leer la documentación de map en MDN\r\n                return (\r\n                  <div key={product.id}>\r\n                    <Item\r\n                      name={product.name}\r\n                      thumbnail={product.thumbnail}\r\n                      price={product.price}\r\n                      stock={product.stock}\r\n                      id={product.id}\r\n                    />\r\n                  </div>\r\n                );\r\n              })\r\n            }\r\n          </>\r\n        ) : (\r\n          <p>Cargando productos...</p>\r\n        ) //Si products.length es \"0\" se interpreta como falso y por lo tanto se imprimirá \"cargando productos\"\r\n        //Recuerden, en javascript tenemos tres datos que se pueden interpretar como false: 0, false y undefined\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemList;\r\n"]},"metadata":{},"sourceType":"module"}